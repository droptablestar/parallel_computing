compile: g++ -std=c++0x -lpthread random_walks.cpp -o random_walks
run: ./random_walks <Input_graph_matrix_file_name> <Output_file_name>
     		<Number_of_steps_in_a_random_walk> <Number_of_threads>

General approach:
First the walk is done with 1 thread to obtain a sequential runtime.

Next each thread will iterator through the portion of nodes it controls and for
each walker present on that node it will obtain a pseudo-random number. This
number will index into the outgoing connections this node has to determine where
to walk. At this point the thread will grab a lock on the global vector of
NodeData objects and update the amound of walkers in that node and the number
of visits. This will continue until the number of iterations specified is met
(with a synchronization point located once all threads have moved all their
walkers).

At this point each thread will contruct a priority queue of its nodes, sorted
on the number of visits each node has received. Following this each thread will
pop off the top 100 of these nodes and store them in a global vector (giving
each thread an entry into the vector). Finally, once the main thread is returned
to we examine the tops of the vectors generated by each thread and grab the
overall top 100 nodes.
